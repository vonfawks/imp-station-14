using System.Diagnostics.CodeAnalysis;
using System.Linq;
using Content.Client.Kitchen; 
using Content.Client.Guidebook.Richtext;
using Content.Client.Message;
using Content.Client.UserInterface.ControlExtensions;
using Content.Shared.Chemistry.Reagent;
using Content.Shared.Body.Prototypes;
using Content.Shared.Kitchen; 
using JetBrains.Annotations;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.Guidebook.Controls;

/// <summary>
///     Control for embedding a FoodRecipe into a guidebook.
/// </summary>
[UsedImplicitly, GenerateTypedNameReferences]
public sealed partial class GuideFoodRecipeEmbed : BoxContainer, IDocumentTag, ISearchableControl
{
    [Dependency] private readonly IEntitySystemManager _systemManager = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;

    public GuideFoodRecipeEmbed()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        MouseFilter = MouseFilterMode.Stop;
    }

    public GuideFoodRecipeEmbed(string FoodRecipe) : this()
    {
        GenerateControl(_prototype.Index<FoodRecipePrototype>(FoodRecipe));
    }

    public GuideFoodRecipeEmbed(FoodRecipePrototype FoodRecipe) : this()
    {
        GenerateControl(FoodRecipe);
    }

    public bool CheckMatchesSearch(string query)
    {
        return this.ChildrenContainText(query);
    }

    public void SetHiddenState(bool state, string query)
    {
        Visible = CheckMatchesSearch(query) ? state : !state;
    }

    public bool TryParseTag(Dictionary<string, string> args, [NotNullWhen(true)] out Control? control)
    {
        control = null;
        if (!args.TryGetValue("FoodRecipe", out var id))
        {
            Logger.Error("FoodRecipe embed tag is missing FoodRecipe prototype argument");
            return false;
        }

        if (!_prototype.TryIndex<FoodRecipePrototype>(id, out var FoodRecipe))
        {
            Logger.Error($"Specified FoodRecipe prototype \"{id}\" is not a valid FoodRecipe prototype");
            return false;
        }

        GenerateControl(FoodRecipe);

        control = this;
        return true;
    }

    private void GenerateControl(FoodRecipePrototype FoodRecipe)
    {
        //Giving a tasteful background color to each recipe header
        NameBackground.PanelOverride = new StyleBoxFlat
        {
            BackgroundColor = Color.Black
        };

        //Setting the recipe name
        //We remove the " recipe" from the recipe name since it's implied we are looking at recipes in a recipe book
        var recipeName = FoodRecipe.Name;
        recipeName = recipeName.Replace(" recipe", "");
        FoodRecipeName.SetMessage(FoodRecipe.Name.Replace(" recipe", "")); 

        //This is where we build the recipe string 
        FormattedMessage ingredientsDescription = new();

        //First we list solid ingredients
        if(FoodRecipe.IngredientsSolids.Count != 0)
        {
            ingredientsDescription.AddText("Solid ingredients :");
            foreach(var solidIngredientKeys in FoodRecipe.IngredientsSolids.Keys)
            {
                ingredientsDescription.PushNewline();
                ingredientsDescription.AddText(" " + FoodRecipe.IngredientsSolids[solidIngredientKeys] + " " + _prototype.Index<EntityPrototype>(solidIngredientKeys).Name);
            }
        }

        //If there's both solid and liquid ingredients, we need an additional line here to keep the list well organised
        if(FoodRecipe.IngredientsSolids.Count != 0 && FoodRecipe.IngredientsReagents.Count != 0)
        {
                ingredientsDescription.PushNewline();
        }
        
        //Then we list liquid ingredients
        if(FoodRecipe.IngredientsReagents.Count != 0)
        {
            ingredientsDescription.AddText("Liquid ingredients :");
            foreach(var reagentIngredientKeys in FoodRecipe.IngredientsReagents.Keys)
            {
                ingredientsDescription.PushNewline();
                ingredientsDescription.AddText(" " + FoodRecipe.IngredientsReagents[reagentIngredientKeys] + "u " + _prototype.Index<ReagentPrototype>(reagentIngredientKeys).LocalizedName);
            }
        }
        
        FoodRecipeIngredients.SetMessage(ingredientsDescription);

        FoodRecipeDescription.SetMessage("Microwave time : " + FoodRecipe.CookTime + " seconds");
    }
}
