- type: entity
  parent: BaseStructureDynamic
  id: CrateGeneric
  categories: [ HideSpawnMenu ]
  name: crate
  description: A large container for items.
  components:
  - type: Animateable
  - type: Transform
    noRot: true
  - type: Icon
    sprite: _Impstation/Structures/Storage/Crates/generic.rsi # imp
    state: icon
  - type: Sprite
    noRot: true
    sprite: _Impstation/Structures/Storage/Crates/generic.rsi # imp
    layers:
    - state: base
      map: ["enum.StorageVisualLayers.Base"]
    - state: closed
      map: ["enum.StorageVisualLayers.Door"]
    - state: welded
      visible: false
      map: ["enum.WeldableLayers.BaseWelded"]
    - state: paper
      sprite: Structures/Storage/Crates/labels.rsi
      map: ["enum.PaperLabelVisuals.Layer"]
      offset: 0.0, -0.0625 #imp edit, scooch vanilla label sprites down two pixels to fit
    # imp edit start, used for GenericVisualizer to allow offsetting this layer
    - state: open
      map: [ open_crate ]
      offset: 0, 0.65625 #this is 21 pixels up, adjust open sprites or offsets of children as needed
    # imp edit end
  - type: InteractionOutline
  - type: Physics
  - type: Fixtures
    fixtures:
      fix1:
        shape:
          !type:PhysShapeAabb
          bounds: "-0.4,-0.4,0.4,0.29"
        density: 50
        mask:
        - CrateMask #this is so they can go under plastic flaps
        layer:
        - MachineLayer
  - type: EntityStorage
  - type: PlaceableSurface
    isPlaceable: false # defaults to closed.
  - type: Damageable
    damageContainer: StructuralInorganic
    damageModifierSet: Metallic
  - type: Destructible
    thresholds:
    - trigger:
        !type:DamageTrigger
        damage: 50
      behaviors:
      - !type:DoActsBehavior
        acts: ["Destruction"]
      - !type:PlaySoundBehavior
        sound:
          collection: MetalBreak
  - type: Appearance
  - type: EntityStorageVisuals
    #stateDoorOpen: open #imp edit, GenericVisualizer used for this instead to allow layer offsets
    stateDoorClosed: closed
  - type: GenericVisualizer
    visuals:
      enum.PaperLabelVisuals.HasLabel:
        enum.PaperLabelVisuals.Layer:
          True: { visible: true }
          False: { visible: false }
      enum.PaperLabelVisuals.LabelType:
        enum.PaperLabelVisuals.Layer:
          Paper: { state: paper }
          Bounty: { state: bounty }
          CaptainsPaper: { state: captains_paper }
          Invoice: { state: invoice }
      # imp edit start, toggles the 'open' layer storage visuals
      enum.StorageVisuals.Open:
        open_crate:
          True: { visible: true }
          False: { visible: false }
      # imp edit end
  - type: PaperLabel
    labelSlot:
      insertVerbText: comp-paper-label-insert
      ejectVerbText: comp-paper-label-eject
      whitelist:
        components:
        - Paper
      blacklist:
        tags:
        - Book
  - type: ContainerContainer
    containers:
      entity_storage: !type:Container
      paper_label: !type:ContainerSlot
  - type: ItemSlots
  - type: StaticPrice
    price: 75
  - type: Construction
    graph: CrateGenericSteel
    node: crategenericsteel
    containers:
      - entity_storage
  - type: RequireProjectileTarget

- type: entity
  parent: CrateGeneric
  id: CrateBaseWeldable
  categories: [ HideSpawnMenu ]
  components:
  - type: Weldable
  - type: ResistLocker

- type: entity
  parent: CrateBaseWeldable
  id: CrateBaseSecure
  suffix: Secure
  components:
  - type: Lock
  - type: LockVisuals
  - type: AccessReader
  - type: Icon
    sprite: _Impstation/Structures/Storage/Crates/secure.rsi # imp
    state: icon
  - type: Sprite
    sprite: _Impstation/Structures/Storage/Crates/secure.rsi # imp
    layers:
    - state: base
    - state: closed
      map: ["enum.StorageVisualLayers.Door"]
    - state: welded
      visible: false
      map: ["enum.WeldableLayers.BaseWelded"]
    - state: locked
      map: ["enum.LockVisualLayers.Lock"]
      shader: unshaded
    - state: paper
      sprite: Structures/Storage/Crates/labels.rsi
      offset: 0.0, -0.0625 #imp edit, match CrateGeneric, since the locks on our sprites are in the middle, instead of the bottom right
      map: ["enum.PaperLabelVisuals.Layer"]
    # imp edit start, used for GenericVisualizer to allow offsetting this layer
    - state: open
      map: [ open_crate ] #open sprites that want to use offsets should use this map, otherwise they should use the open sprite state with EntityStorageVisuals
      offset: 0, 0.65625 #this is 21 pixels up, adjust open sprites or offsets of children as needed
    # imp edit end
  - type: Damageable
    damageContainer: StructuralInorganic
    damageModifierSet: StructuralMetallic
  - type: Destructible
    thresholds:
    - trigger:
        !type:DamageTrigger
        damage: 75
      behaviors:
      - !type:DoActsBehavior
        acts: ["Destruction"]
      - !type:PlaySoundBehavior
        sound:
          collection: MetalBreak
  - type: Construction
    graph: CrateSecure
    node: cratesecure
    containers:
    - entity_storage
  - type: Reflect
    reflects:
    - Energy
    reflectProb: 0.2
    spread: 90
  - type: Paintable
    group: CrateSecure
